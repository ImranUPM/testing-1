# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NfmTS0pmYF9k0Bf3SVHRxfWkf1JaGI02
"""

import streamlit as st
import pandas as pd
import plotly.express as px

def main():
    # Page config
    st.set_page_config(
        page_title='Mental Health in Tech Survey Dashboard',
        layout='wide'
    )

    # Load data
    df = pd.read_csv('combined_mental_health_data.csv')

    # Sidebar filters
    st.sidebar.header("Filters")
    countries = st.sidebar.multiselect("Country", options=sorted(df['Country'].dropna().unique()), default=[])
    genders = st.sidebar.multiselect("Gender", options=sorted(df['Gender'].dropna().unique()), default=[])
    age_min, age_max = int(df['Age'].min()), int(df['Age'].max())
    age_range = st.sidebar.slider("Age Range", age_min, age_max, (age_min, age_max))
    remote = st.sidebar.selectbox("Remote Work", options=["All", "Yes", "No"])
    employment = st.sidebar.selectbox("Employment Type", options=["All", "Self-employed", "Employed"])

    # Apply filters
    df_filtered = df.copy()
    if countries:
        df_filtered = df_filtered[df_filtered['Country'].isin(countries)]
    if genders:
        df_filtered = df_filtered[df_filtered['Gender'].isin(genders)]
    df_filtered = df_filtered[(df_filtered['Age'] >= age_range[0]) & (df_filtered['Age'] <= age_range[1])]
    if remote != "All":
        df_filtered = df_filtered[df_filtered['remote_work'] == remote]
    if employment != "All":
        is_self = (employment == "Self-employed")
        df_filtered = df_filtered[df_filtered['self_employed'] == is_self]

    # Top KPI cards
    st.markdown("## Key Metrics")
    k1, k2, k3, k4 = st.columns(4)
    k1.metric("Respondents", len(df_filtered))
    k2.metric("Family History", f"{df_filtered['family_history'].mean() * 100:.1f}%")
    k3.metric("Sought Treatment", f"{df_filtered['treatment'].mean() * 100:.1f}%")
    k4.metric("Benefits Offered", f"{df_filtered['benefits'].mean() * 100:.1f}%")

    # Demographics
    st.markdown("### Demographics")
    col1, col2, col3 = st.columns(3)

    with col1:
        gender_counts = df_filtered['Gender'].value_counts().reset_index()
        fig = px.pie(gender_counts, names='index', values='Gender', title='Gender Distribution')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        fig = px.histogram(df_filtered, x='Age', nbins=20, title='Age Distribution')
        st.plotly_chart(fig, use_container_width=True)

    with col3:
        fig = px.choropleth(
            df_filtered,
            locations='Country',
            locationmode='country names',
            color=df_filtered.groupby('Country')['Country'].transform('count'),
            title='Respondent Count by Country'
        )
        st.plotly_chart(fig, use_container_width=True)

    # Workplace Context
    st.markdown("### Workplace Context")
    col4, col5 = st.columns(2)

    with col4:
        size_tech = df_filtered.groupby(['no_employees', 'tech_company']).size().reset_index(name='count')
        fig = px.bar(
            size_tech,
            x='no_employees',
            y='count',
            color='tech_company',
            barmode='stack',
            title='Company Size: Tech vs Non-Tech'
        )
        st.plotly_chart(fig, use_container_width=True)

    with col5:
        remote_counts = df_filtered['remote_work'].value_counts().reset_index()
        fig = px.bar(remote_counts, x='index', y='remote_work', title='Remote vs On-Site')
        st.plotly_chart(fig, use_container_width=True)

    # Culture & Support
    st.markdown("### Culture & Support")
    support_df = df_filtered[['supervisor', 'coworkers', 'anonymity', 'wellness_program']].apply(lambda x: x.value_counts()).fillna(0).T
    fig = px.bar(
        support_df.reset_index().melt(id_vars='index'),
        x='index',
        y='value',
        color='variable',
        barmode='group',
        title='Support & Openness'
    )
    st.plotly_chart(fig, use_container_width=True)

    # Outcomes & Consequences
    st.markdown("### Outcomes & Consequences")
    out_cols = ['mental_health_consequence', 'phys_health_consequence', 'leave']
    for col in out_cols:
        counts = df_filtered[col].value_counts().reset_index()
        fig = px.bar(counts, x='index', y=col, title=f'Responses for {col.replace("_", " ").title()}')
        st.plotly_chart(fig, use_container_width=True)

    # Cross-Analysis
    st.markdown("### Cross-Analysis: Age vs Treatment")
    scatter = px.scatter(
        df_filtered,
        x='Age',
        y=df_filtered['treatment'].astype(int),
        trendline='ols',
        labels={'y': 'Treated (0 = No, 1 = Yes)'}
    )
    st.plotly_chart(scatter, use_container_width=True)

if __name__ == "__main__":
    main()