# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NfmTS0pmYF9k0Bf3SVHRxfWkf1JaGI02
"""

import streamlit as st
import pandas as pd
import altair as alt
from vega_datasets import data as vega_data

# ---------- Load Data ----------
@st.cache_data
def load_data():
    return pd.read_csv('combined_mental_health_data.csv')

df = load_data()

# ---------- Page Config ----------
st.set_page_config(
    page_title='Mental Health in Tech Survey Dashboard',
    layout='wide'
)

# ---------- Sidebar Filters ----------
st.sidebar.header("Filters")
countries = st.sidebar.multiselect(
    "Country",
    options=sorted(df['Country'].dropna().unique())
)
genders = st.sidebar.multiselect(
    "Gender",
    options=sorted(df['Gender'].dropna().unique())
)
age_min, age_max = int(df['Age'].min()), int(df['Age'].max())
age_range = st.sidebar.slider("Age Range", age_min, age_max, (age_min, age_max))
remote = st.sidebar.selectbox("Remote Work", ["All","Yes","No"])
employment = st.sidebar.selectbox("Employment Type", ["All","Self-employed","Employed"])

# Apply filters
df_f = df.copy()
if countries:
    df_f = df_f[df_f['Country'].isin(countries)]
if genders:
    df_f = df_f[df_f['Gender'].isin(genders)]
df_f = df_f[(df_f['Age']>=age_range[0])&(df_f['Age']<=age_range[1])]
if remote!="All":
    df_f = df_f[df_f['remote_work']==remote]
if employment!="All":
    sel = employment=="Self-employed"
    df_f = df_f[df_f['self_employed']==sel]

# ---------- KPI Cards ----------
st.markdown("## Key Metrics")
c1,c2,c3,c4 = st.columns(4)
c1.metric("Respondents", len(df_f))
c2.metric("Family History", f"{df_f['family_history'].mean()*100:.1f}%")
c3.metric("Sought Treatment", f"{df_f['treatment'].mean()*100:.1f}%")
c4.metric("Benefits Offered", f"{df_f['benefits'].mean()*100:.1f}%")

# ---------- Demographics ----------
st.markdown("### Demographics")
d1,d2,d3 = st.columns(3)

with d1:
    # Donut chart for Gender
    gender_counts = df_f['Gender'].value_counts().reset_index()
    gender_counts.columns = ['Gender','Count']
    pie = (
        alt.Chart(gender_counts)
        .mark_arc(innerRadius=50)
        .encode(
            theta=alt.Theta(field="Count", type="quantitative"),
            color=alt.Color(field="Gender", type="nominal"),
            tooltip=["Gender","Count"]
        )
        .properties(title="Gender Distribution")
    )
    st.altair_chart(pie, use_container_width=True)

with d2:
    # Age histogram
    hist = (
        alt.Chart(df_f)
        .mark_bar()
        .encode(
            alt.X("Age:Q", bin=alt.Bin(maxbins=20)),
            y='count()'
        )
        .properties(title="Age Distribution")
    )
    st.altair_chart(hist, use_container_width=True)

with d3:
    # Country counts bar chart (as alternative to map)
    country_counts = df_f['Country'].value_counts().reset_index()
    country_counts.columns = ['Country','Count']
    bar = (
        alt.Chart(country_counts)
        .mark_bar()
        .encode(
            x=alt.X("Country:N", sort='-y', title=None),
            y=alt.Y("Count:Q"),
            tooltip=["Country","Count"]
        )
        .properties(title="Respondents by Country")
    )
    st.altair_chart(bar, use_container_width=True)

# ---------- Workplace Context ----------
st.markdown("### Workplace Context")
w1,w2 = st.columns(2)

with w1:
    size_tech = (
        df_f.groupby(['no_employees','tech_company'])
        .size().reset_index(name='Count')
    )
    st.altair_chart(
        alt.Chart(size_tech)
        .mark_bar()
        .encode(
            x=alt.X("no_employees:N", title="Company Size"),
            y=alt.Y("Count:Q"),
            color=alt.Color("tech_company:N", title="Tech Co."),
            tooltip=["no_employees","tech_company","Count"]
        )
        .properties(title="Company Size: Tech vs Non-Tech")
        , use_container_width=True
    )

with w2:
    remote_counts = df_f['remote_work'].value_counts().reset_index()
    remote_counts.columns = ['remote_work','Count']
    st.altair_chart(
        alt.Chart(remote_counts)
        .mark_bar()
        .encode(
            x=alt.X("remote_work:N", title="Remote Work"),
            y="Count:Q",
            tooltip=["remote_work","Count"]
        )
        .properties(title="Remote vs On-Site")
        , use_container_width=True
    )

# ---------- Culture & Support ----------
st.markdown("### Culture & Support")
support = df_f[['supervisor','coworkers','anonymity','wellness_program']].apply(pd.Series.value_counts).fillna(0).reset_index()
support = support.melt(id_vars='index', var_name='Question', value_name='Count')
st.altair_chart(
    alt.Chart(support)
    .mark_bar()
    .encode(
        x=alt.X("index:N", title=None),
        y="Count:Q",
        color="Question:N",
        tooltip=["Question","index","Count"]
    )
    .properties(title="Support & Openness")
    , use_container_width=True
)

# ---------- Outcomes & Consequences ----------
st.markdown("### Outcomes & Consequences")
for col in ['mental_health_consequence','phys_health_consequence','leave']:
    counts = df_f[col].value_counts().reset_index()
    counts.columns = [col,'Count']
    st.altair_chart(
        alt.Chart(counts)
        .mark_bar()
        .encode(
            x=alt.X(f"{col}:N", title=col.replace("_"," ").title()),
            y="Count:Q",
            tooltip=[col,"Count"]
        )
        .properties(title=f"Responses: {col.replace('_',' ').title()}")
        , use_container_width=True
    )

# ---------- Cross-Analysis ----------
st.markdown("### Cross-Analysis: Age vs Treatment")
# add jitter to reduce overlap
df_f['treatment_int'] = df_f['treatment'].astype(int)
scatter = (
    alt.Chart(df_f)
    .mark_circle(size=60, opacity=0.5)
    .encode(
        x="Age:Q",
        y="treatment_int:Q",
        tooltip=["Age","treatment_int"]
    )
    .properties(title="Age vs Treated (0=No,1=Yes)")
)
# regression line
reg = scatter.transform_regression("Age","treatment_int",method="linear").mark_line()
st.altair_chart((scatter+reg).configure_axis(labelAngle=0), use_container_width=True)