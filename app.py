# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NfmTS0pmYF9k0Bf3SVHRxfWkf1JaGI02
"""

import streamlit as st
import pandas as pd
import plotly.express as px

# Page configuration\st.set_page_config(
    page_title='Mental Health in Tech Survey Dashboard',
    layout='wide',
    initial_sidebar_state='expanded'

@st.cache_data
def load_data():
    return pd.read_csv('combined_mental_health_data.csv')

# Load data
df = load_data()

# Sidebar filters
st.sidebar.header('Filters')

# Country filter
countries = sorted(df['Country'].dropna().unique())
selected_countries = st.sidebar.multiselect('Country', countries, default=countries)

# Gender filter
genders = sorted(df['Gender'].dropna().unique())
selected_genders = st.sidebar.multiselect('Gender', genders, default=genders)

# Age slider
min_age, max_age = int(df['Age'].min()), int(df['Age'].max())
age_range = st.sidebar.slider('Age Range', min_age, max_age, (min_age, max_age))

# Remote work filter
remote_opts = sorted(df['remote_work'].dropna().unique())
selected_remote = st.sidebar.multiselect('Remote Work Status', remote_opts, default=remote_opts)

# Employment type
emp_opts = sorted(df['self_employed'].dropna().unique())
selected_emp = st.sidebar.multiselect('Employment Type', emp_opts, default=emp_opts)

# Apply filters
df_filtered = df[
    df['Country'].isin(selected_countries) &
    df['Gender'].isin(selected_genders) &
    df['Age'].between(age_range[0], age_range[1]) &
    df['remote_work'].isin(selected_remote) &
    df['self_employed'].isin(selected_emp)
]

# Title and KPIs
st.title('Mental Health in Tech Survey Dashboard')
col1, col2, col3, col4, col5 = st.columns(5)
col1.metric('Respondents', len(df_filtered))
col2.metric(
    'Sought Treatment %',
    f"{df_filtered['treatment'].map({'Yes':1,'No':0}).mean()*100:.1f}%"
)
col3.metric(
    'Family History %',
    f"{df_filtered['family_history'].map({'Yes':1,'No':0}).mean()*100:.1f}%"
)
col4.metric(
    'Benefits Offered %',
    f"{df_filtered['benefits'].map({'Yes':1,'No':0}).mean()*100:.1f}%"
)
col5.metric(
    'Discuss w/ Supervisor %',
    f"{df_filtered['supervisor'].map({'Yes':1,'No':0}).mean()*100:.1f}%"
)
st.markdown('---')

# Demographics
st.subheader('Demographics')
col1, col2, col3 = st.columns([1, 1, 2])

# Gender breakdown pie chart
gender_counts = df_filtered['Gender'].value_counts().reset_index()
gender_counts.columns = ['Gender', 'Count']
fig1 = px.pie(gender_counts, names='Gender', values='Count', title='Gender Breakdown')
col1.plotly_chart(fig1, use_container_width=True)

# Age distribution histogram
fig2 = px.histogram(df_filtered, x='Age', nbins=20, title='Age Distribution')
col2.plotly_chart(fig2, use_container_width=True)

# Country choropleth map
country_counts = df_filtered['Country'].value_counts().reset_index()
country_counts.columns = ['country', 'count']
fig3 = px.choropleth(
    country_counts,
    locations='country',
    locationmode='country names',
    color='count',
    title='Respondents by Country'
)
col3.plotly_chart(fig3, use_container_width=True)

st.markdown('---')

# Workplace Context
st.subheader('Workplace Context')
col1, col2 = st.columns(2)

tech_vs_size = (
    df_filtered
    .groupby(['no_employees', 'tech_company'])
    .size()
    .reset_index(name='count')
)
fig4 = px.bar(
    tech_vs_size,
    x='no_employees',
    y='count',
    color='tech_company',
    barmode='stack',
    title='Company Size by Tech vs Non-Tech'
)
col1.plotly_chart(fig4, use_container_width=True)

remote_counts = df_filtered['remote_work'].value_counts().reset_index()
remote_counts.columns = ['remote_work', 'count']
fig5 = px.bar(remote_counts, x='remote_work', y='count', title='Remote vs On-site')
col2.plotly_chart(fig5, use_container_width=True)

st.markdown('---')

# Culture & Support
st.subheader('Culture & Support at Work')
questions = ['supervisor', 'coworkers', 'anonymity', 'wellness_program']
support_df = (
    df_filtered[questions]
    .apply(pd.Series.value_counts)
    .fillna(0)
    .reset_index()
    .melt(id_vars='index', var_name='Response', value_name='Count')
)
support_df.columns = ['Question', 'Response', 'Count']
fig6 = px.bar(
    support_df,
    x='Count',
    y='Question',
    color='Response',
    orientation='h',
    title='Openness & Support'
)
st.plotly_chart(fig6, use_container_width=True)

st.markdown('---')

# Outcomes & Consequences
st.subheader('Outcomes & Consequences')
outcome_cols = ['mental_health_consequence', 'phys_health_consequence', 'seek_help']
for col in outcome_cols:
    counts = df_filtered[col].value_counts().reset_index()
    counts.columns = [col, 'count']
    fig = px.bar(counts, x=col, y='count', title=col.replace('_', ' ').title())
    st.plotly_chart(fig, use_container_width=True)

st.markdown('---')

# Cross-Analysis
st.subheader('Cross-Analysis')
df_scatter = df_filtered.assign(
    treated=df_filtered['treatment'].map({'Yes': 1, 'No': 0})
)
fig7 = px.scatter(
    df_scatter,
    x='Age',
    y='treated',
    title='Age vs Sought Treatment',
    labels={'treated': 'Sought Treatment'}
)
st.plotly_chart(fig7, use_container_width=True)